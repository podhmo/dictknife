consumes:
- /application/json
definitions:
  User:
    properties:
      id:
        type: integer
      name:
        type: string
    required:
    - id
    - name
info:
  description: API description in Markdown.
  title: Sample API
  version: 1.0.0
openapi: 3.0.0
parameters:
  userId:
    description: The ID of the user to return
    format: int64
    in: path
    minimum: 1
    name: userId
    requred: true
    type: integer
paths:
  /users:
    get:
      description: Optional extended description in Markdown.
      responses:
        '200':
          content:
            /application/json:
              schema:
                items:
                  type: string
                type: array
          description: A JSON array of user names
      summary: Returns a list of users.
    post:
      parameters:
      - in: body
        name: user
        schema:
          properties:
            username:
              type: string
          type: object
      resonses:
        '201':
          description: Created
      summary: Craetes a user.
  /users/{userId}:
    get:
      parameters:
      - description: The ID of the user to return
        format: int64
        in: path
        minimum: 1
        name: userId
        requred: true
        type: integer
      responses:
        '200':
          content:
            /application/json:
              schema:
                properties:
                  id:
                    example: 4
                    format: int64
                    type: integer
                  name:
                    example: Jessica Smith
                    type: string
                type: object
          description: A user object.
        '400':
          description: The specified user ID is invalid (not a number)
        '404':
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error
      summary: Returns a user by ID.
  /users2:
    post:
      parameters:
      - in: body
        name: user
        schema:
          $ref: '#/definitions/User'
      resonses:
        '201':
          description: Created
      summary: Craetes a user.
  /users2/{userId}:
    get:
      parameters:
      - $ref: '#/parameters/userId'
      responses:
        '200':
          content:
            /application/json:
              schema:
                $ref: '#/definitions/User'
          description: A user object.
        '400':
          description: The specified user ID is invalid (not a number)
        '404':
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error
      summary: Returns a user by ID.
security:
- BasicAuth: []
securityDefinitions:
  BasicAuth:
    type: basic
servers:
- description: ''
  url: 'http://api.example.com/v1'
